"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[3958],{69884:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>s,default:()=>h,frontMatter:()=>r,metadata:()=>o,toc:()=>c});var a=t(74848),i=t(28453);const r={},s="Graphql",o={id:"architect/api/GraphQL",title:"Graphql",description:"GraphQL is a query language for your API, and a server-side runtime for executing queries using a type system you define for your data.",source:"@site/docs/architect/api/GraphQL.md",sourceDirName:"architect/api",slug:"/architect/api/GraphQL",permalink:"/docs/architect/api/GraphQL",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"GraphQL Cache",permalink:"/docs/architect/api/GraphQL Cache"},next:{title:"What\u2019s the Difference Between GraphQL and REST?",permalink:"/docs/architect/api/Graphql vs RESTful"}},d={},c=[{value:"Queries and Mutations",id:"Queries-and-Mutations",level:2},{value:"Schemas and Types",id:"Schemas-and-Types",level:2},{value:"Validation",id:"Validation",level:2}];function l(e){const n={code:"code",h1:"h1",h2:"h2",li:"li",ol:"ol",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.h1,{id:"Graphql",children:"Graphql"}),"\n",(0,a.jsx)(n.p,{children:"GraphQL is a query language for your API, and a server-side runtime for executing queries using a type system you define for your data.\nGraphQL provides a complete and understandable description of the data in your API, gives clients the power to ask for exactly what they need and nothing more, makes it easier to evolve APIs over time, and enables powerful developer tools.\nA GraphQL service is created by defining types and fields on those types, then providing functions for each field on each type."}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsx)(n.li,{children:"Ask for what you need, get exactly that."}),"\n",(0,a.jsx)(n.li,{children:"Get many resources in a single request."}),"\n",(0,a.jsx)(n.li,{children:"Describe what's possible with a type system."}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"Queries-and-Mutations",children:"Queries and Mutations"}),"\n",(0,a.jsx)(n.h2,{id:"Schemas-and-Types",children:"Schemas and Types"}),"\n",(0,a.jsx)(n.h2,{id:"Validation",children:"Validation"}),"\n",(0,a.jsx)(n.p,{children:"Fields\nArguments\nAliases\nFragments\nOperation name\nVariables\nVariable definitions\nDefault variables"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"query HeroNameAndFriends($episode: Episode = JEDI) {\n  hero(episode: $episode) {\n    name\n    friends {\n      name\n    }\n  }\n}\n"})})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(l,{...e})}):l(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>o});var a=t(96540);const i={},r=a.createContext(i);function s(e){const n=a.useContext(r);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),a.createElement(r.Provider,{value:n},e.children)}}}]);