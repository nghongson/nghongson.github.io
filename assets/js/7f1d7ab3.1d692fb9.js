"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[294],{65566:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>c,contentTitle:()=>r,default:()=>h,frontMatter:()=>t,metadata:()=>a,toc:()=>o});var s=i(74848),l=i(28453);const t={},r="Clean Code",a={id:"architect/Clean Code",title:"Clean Code",description:"Code is clean if it can be understood easily \u2013 by everyone on the team. Clean code can be read and enhanced by a developer other than its original author. With understandability comes readability, changeability, extensibility and maintainability.",source:"@site/docs/architect/Clean Code.md",sourceDirName:"architect",slug:"/architect/Clean Code",permalink:"/docs/architect/Clean Code",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Clean Architecture",permalink:"/docs/architect/Clean Architecture"},next:{title:"Concurrency & Parallelism",permalink:"/docs/architect/Concurrency & Parallelism"}},c={},o=[{value:"General rules",id:"General-rules",level:2},{value:"Design rules",id:"Design-rules",level:2},{value:"Understandability tips",id:"Understandability-tips",level:2},{value:"Names rules",id:"Names-rules",level:2},{value:"Functions rules",id:"Functions-rules",level:2},{value:"Comments rules",id:"Comments-rules",level:2},{value:"Source code structure",id:"Source-code-structure",level:2},{value:"Objects and data structures",id:"Objects-and-data-structures",level:2},{value:"Tests",id:"Tests",level:2},{value:"Code smells",id:"Code-smells",level:2}];function d(e){const n={h1:"h1",h2:"h2",hr:"hr",li:"li",ol:"ol",p:"p",...(0,l.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h1,{id:"Clean-Code",children:"Clean Code"}),"\n",(0,s.jsx)(n.p,{children:"Code is clean if it can be understood easily \u2013 by everyone on the team. Clean code can be read and enhanced by a developer other than its original author. With understandability comes readability, changeability, extensibility and maintainability."}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"General-rules",children:"General rules"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"Follow standard conventions."}),"\n",(0,s.jsx)(n.li,{children:"Keep it simple stupid. Simpler is always better. Reduce complexity as much as possible."}),"\n",(0,s.jsx)(n.li,{children:"Boy scout rule. Leave the campground cleaner than you found it."}),"\n",(0,s.jsx)(n.li,{children:"Always find root cause. Always look for the root cause of a problem."}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"Design-rules",children:"Design rules"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"Keep configurable data at high levels."}),"\n",(0,s.jsx)(n.li,{children:"Prefer polymorphism to if/else or switch/case."}),"\n",(0,s.jsx)(n.li,{children:"Separate multi-threading code."}),"\n",(0,s.jsx)(n.li,{children:"Prevent over-configurability."}),"\n",(0,s.jsx)(n.li,{children:"Use dependency injection."}),"\n",(0,s.jsx)(n.li,{children:"Follow Law of Demeter. A class should know only its direct dependencies."}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"Understandability-tips",children:"Understandability tips"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"Be consistent. If you do something a certain way, do all similar things in the same way."}),"\n",(0,s.jsx)(n.li,{children:"Use explanatory variables."}),"\n",(0,s.jsx)(n.li,{children:"Encapsulate boundary conditions. Boundary conditions are hard to keep track of. Put the processing for them in one place."}),"\n",(0,s.jsx)(n.li,{children:"Prefer dedicated value objects to primitive type."}),"\n",(0,s.jsx)(n.li,{children:"Avoid logical dependency. Don't write methods which works correctly depending on something else in the same class."}),"\n",(0,s.jsx)(n.li,{children:"Avoid negative conditionals."}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"Names-rules",children:"Names rules"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"Choose descriptive and unambiguous names."}),"\n",(0,s.jsx)(n.li,{children:"Make meaningful distinction."}),"\n",(0,s.jsx)(n.li,{children:"Use pronounceable names."}),"\n",(0,s.jsx)(n.li,{children:"Use searchable names."}),"\n",(0,s.jsx)(n.li,{children:"Replace magic numbers with named constants."}),"\n",(0,s.jsx)(n.li,{children:"Avoid encodings. Don't append prefixes or type information."}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"Functions-rules",children:"Functions rules"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"Small."}),"\n",(0,s.jsx)(n.li,{children:"Do one thing."}),"\n",(0,s.jsx)(n.li,{children:"Use descriptive names."}),"\n",(0,s.jsx)(n.li,{children:"Prefer fewer arguments."}),"\n",(0,s.jsx)(n.li,{children:"Have no side effects."}),"\n",(0,s.jsx)(n.li,{children:"Don't use flag arguments. Split method into several independent methods that can be called from the client without the flag."}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"Comments-rules",children:"Comments rules"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"Always try to explain yourself in code."}),"\n",(0,s.jsx)(n.li,{children:"Don't be redundant."}),"\n",(0,s.jsx)(n.li,{children:"Don't add obvious noise."}),"\n",(0,s.jsx)(n.li,{children:"Don't use closing brace comments."}),"\n",(0,s.jsx)(n.li,{children:"Don't comment out code. Just remove."}),"\n",(0,s.jsx)(n.li,{children:"Use as explanation of intent."}),"\n",(0,s.jsx)(n.li,{children:"Use as clarification of code."}),"\n",(0,s.jsx)(n.li,{children:"Use as warning of consequences."}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"Source-code-structure",children:"Source code structure"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"Separate concepts vertically."}),"\n",(0,s.jsx)(n.li,{children:"Related code should appear vertically dense."}),"\n",(0,s.jsx)(n.li,{children:"Declare variables close to their usage."}),"\n",(0,s.jsx)(n.li,{children:"Dependent functions should be close."}),"\n",(0,s.jsx)(n.li,{children:"Similar functions should be close."}),"\n",(0,s.jsx)(n.li,{children:"Place functions in the downward direction."}),"\n",(0,s.jsx)(n.li,{children:"Keep lines short."}),"\n",(0,s.jsx)(n.li,{children:"Don't use horizontal alignment."}),"\n",(0,s.jsx)(n.li,{children:"Use white space to associate related things and disassociate weakly related."}),"\n",(0,s.jsx)(n.li,{children:"Don't break indentation."}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"Objects-and-data-structures",children:"Objects and data structures"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"Hide internal structure."}),"\n",(0,s.jsx)(n.li,{children:"Prefer data structures."}),"\n",(0,s.jsx)(n.li,{children:"Avoid hybrids structures (half object and half data)."}),"\n",(0,s.jsx)(n.li,{children:"Should be small."}),"\n",(0,s.jsx)(n.li,{children:"Do one thing."}),"\n",(0,s.jsx)(n.li,{children:"Small number of instance variables."}),"\n",(0,s.jsx)(n.li,{children:"Base class should know nothing about their derivatives."}),"\n",(0,s.jsx)(n.li,{children:"Better to have many functions than to pass some code into a function to select a behavior."}),"\n",(0,s.jsx)(n.li,{children:"Prefer non-static methods to static methods."}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"Tests",children:"Tests"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"One assert per test."}),"\n",(0,s.jsx)(n.li,{children:"Readable."}),"\n",(0,s.jsx)(n.li,{children:"Fast."}),"\n",(0,s.jsx)(n.li,{children:"Independent."}),"\n",(0,s.jsx)(n.li,{children:"Repeatable."}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"Code-smells",children:"Code smells"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"Rigidity. The software is difficult to change. A small change causes a cascade of subsequent changes."}),"\n",(0,s.jsx)(n.li,{children:"Fragility. The software breaks in many places due to a single change."}),"\n",(0,s.jsx)(n.li,{children:"Immobility. You cannot reuse parts of the code in other projects because of involved risks and high effort."}),"\n",(0,s.jsx)(n.li,{children:"Needless Complexity."}),"\n",(0,s.jsx)(n.li,{children:"Needless Repetition."}),"\n",(0,s.jsx)(n.li,{children:"Opacity. The code is hard to understand."}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},28453:(e,n,i)=>{i.d(n,{R:()=>r,x:()=>a});var s=i(96540);const l={},t=s.createContext(l);function r(e){const n=s.useContext(t);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:r(e.components),s.createElement(t.Provider,{value:n},e.children)}}}]);