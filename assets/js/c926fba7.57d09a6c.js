"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[4807],{2017:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>i,contentTitle:()=>o,default:()=>m,frontMatter:()=>a,metadata:()=>d,toc:()=>c});var s=r(74848),n=r(28453);const a={},o="Understanding Streams in Node.js",d={id:"nodejs/Streams",title:"Understanding Streams in Node.js",description:"There are 4 types of streams in Node.js:",source:"@site/docs/nodejs/Streams.md",sourceDirName:"nodejs",slug:"/nodejs/Streams",permalink:"/docs/nodejs/Streams",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"SOLID in Nodejs",permalink:"/docs/nodejs/SOLID"},next:{title:"Typescript",permalink:"/docs/nodejs/Typescript/"}},i={},c=[{value:"There are 4 types of streams in Node.js:",id:"There-are-4-types-of-streams-in-Nodejs",level:2},{value:"How to create a readable stream",id:"How-to-create-a-readable-stream",level:2}];function l(e){const t={code:"code",h1:"h1",h2:"h2",li:"li",ol:"ol",pre:"pre",...(0,n.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.h1,{id:"Understanding-Streams-in-Nodejs",children:"Understanding Streams in Node.js"}),"\n",(0,s.jsx)(t.h2,{id:"There-are-4-types-of-streams-in-Nodejs",children:"There are 4 types of streams in Node.js:"}),"\n",(0,s.jsxs)(t.ol,{children:["\n",(0,s.jsxs)(t.li,{children:["Writable: streams to which we can write data. For example, ",(0,s.jsx)(t.code,{children:"fs.createWriteStream()"})," lets us write data to a file using streams."]}),"\n",(0,s.jsxs)(t.li,{children:["Readable: streams from which data can be read. For example: ",(0,s.jsx)(t.code,{children:"fs.createReadStream()"})," lets us read the contents of a file."]}),"\n",(0,s.jsxs)(t.li,{children:["Duplex: streams that are both Readable and Writable. For example, ",(0,s.jsx)(t.code,{children:"net.Socket"})]}),"\n",(0,s.jsx)(t.li,{children:"Transform: streams that can modify or transform the data as it is written and read. For example, in the instance of file-compression, you can write compressed data and read decompressed data to and from a file."}),"\n"]}),"\n",(0,s.jsx)(t.h2,{id:"How-to-create-a-readable-stream",children:"How to create a readable stream"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{children:"const Stream = require('stream')\nconst readableStream = new Stream.Readable()\n"})}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{children:"readableStream.push('ping!')\nreadableStream.push('pong!')\n"})})]})}function m(e={}){const{wrapper:t}={...(0,n.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}},28453:(e,t,r)=>{r.d(t,{R:()=>o,x:()=>d});var s=r(96540);const n={},a=s.createContext(n);function o(e){const t=s.useContext(a);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function d(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:o(e.components),s.createElement(a.Provider,{value:t},e.children)}}}]);