"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[5928],{9326:(e,i,t)=>{t.r(i),t.d(i,{assets:()=>o,contentTitle:()=>s,default:()=>h,frontMatter:()=>r,metadata:()=>l,toc:()=>d});var n=t(4848),a=t(8453);const r={},s="Working with files in Magento",l={id:"mage2/files",title:"Working with files in Magento",description:"Files inaccessible by users",source:"@site/docs/mage2/files.md",sourceDirName:"mage2",slug:"/mage2/files",permalink:"/docs/mage2/files",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Debug M2",permalink:"/docs/mage2/debugs"},next:{title:"graphql",permalink:"/docs/mage2/graphql"}},o={},d=[{value:"Files inaccessible by users",id:"Files-inaccessible-by-users",level:3},{value:"Files that require authorization",id:"Files-that-require-authorization",level:3},{value:"Publicly accessible media files",id:"Publicly-accessible-media-files",level:3},{value:"Components",id:"Components",level:3},{value:"Upload",id:"Upload",level:2},{value:"Read files",id:"Read-files",level:2},{value:"CSV",id:"CSV",level:3},{value:"Json",id:"Json",level:3},{value:"Xml",id:"Xml",level:3},{value:"Excel",id:"Excel",level:3}];function c(e){const i={code:"code",h1:"h1",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,a.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(i.h1,{id:"Working-with-files-in-Magento",children:"Working with files in Magento"}),"\n",(0,n.jsx)(i.h3,{id:"Files-inaccessible-by-users",children:"Files inaccessible by users"}),"\n",(0,n.jsx)(i.p,{children:"Some files, generated or uploaded, need to be stored on the server for further processing or querying, but should not be directly accessible through a URL. Below are measures to avoid potential unauthorized access, path traversal, or RCE problems from such files"}),"\n",(0,n.jsxs)(i.ul,{children:["\n",(0,n.jsx)(i.li,{children:"Use random file names and extensions (it's better to use no file extensions); do not trust file names provided by users"}),"\n",(0,n.jsx)(i.li,{children:"Store files in a directory specifically for generated/uploaded files"}),"\n",(0,n.jsx)(i.li,{children:"Do not store these files in an HTTP accessible folder (like /pub)"}),"\n",(0,n.jsx)(i.li,{children:"Store file records in a database if the files need to be assigned to an entity"}),"\n",(0,n.jsx)(i.li,{children:"Do not trust user provided file names/IDs when deleting files; validate file ownership through the database"}),"\n"]}),"\n",(0,n.jsx)(i.pre,{children:(0,n.jsx)(i.code,{children:"class MyClass {\n    private \\Magento\\Framework\\Filesystem $filesystem;\n\n    private \\Magento\\Framework\\Filesystem\\Directory\\WriteFactory $writeFactory;\n\n    private \\Magento\\Framework\\Math\\Random $rand;\n\n    public function __construct(\n        \\Magento\\Framework\\Filesystem $filesystem,\n        \\Magento\\Framework\\Filesystem\\Directory\\WriteFactory $writeFactory,\n        \\Magento\\Framework\\Math\\Random $rand\n    ) {\n        $this->filesystem = $filesystem;\n        $this->writeFactory = $writeFactory;\n        $this->rand = $rand;\n    }\n\n    ...\n\n    public function workWithFiles(): void {\n        ...\n\n        //To read \"MAGENTO_ROOT/var\" sub-directories or files.\n        $varDir = $this->filesystem->getDirectoryRead(\\Magento\\Framework\\App\\Filesystem\\DirectoryList::VAR_DIR);\n        //Going to write files into a designated folder specific to these type of files and functionality\n        //Getting WriteInterface instance of `MAGENTO_ROOT/var/my-modules-dir`\n        $thisModulesFilesDir = $this->writeFactory->create($varDir->getAbsolutePath('my-modules-dir'));\n\n        //Random file name\n        $randomFileName = $this->rand->getRandomString(32);\n        //Copying a file from the system temporary directory into it's new path\n        $thisModulesFilesDir->getDriver()\n            ->copy($tmpUploadedOrGeneratedFilePath, $thisModulesFilesDir->getAbsolutePath($randomFileName));\n    }\n}\n"})}),"\n",(0,n.jsx)(i.h3,{id:"Files-that-require-authorization",children:"Files that require authorization"}),"\n",(0,n.jsx)(i.p,{children:"You should treat files that require authorization to download the same way as inaccessible files; with a controller that performs authorization and then serves the file by outputting its content in response body"}),"\n",(0,n.jsx)(i.h3,{id:"Publicly-accessible-media-files",children:"Publicly accessible media files"}),"\n",(0,n.jsx)(i.p,{children:"Publicly accessible media files present higher risk and require special care because you must keep the user-provided path and file extension. You should verify the following"}),"\n",(0,n.jsxs)(i.ul,{children:["\n",(0,n.jsx)(i.li,{children:"Media files can only be placed in a publicly accessible path"}),"\n",(0,n.jsx)(i.li,{children:"Uploaded file path is inside the designated folder or its subdirectories"}),"\n",(0,n.jsx)(i.li,{children:"Extension is safe (use an allow-list)"}),"\n",(0,n.jsx)(i.li,{children:"File path is out of system folders that contain other application files"}),"\n",(0,n.jsx)(i.li,{children:"Prevent deleting system files in public folders"}),"\n",(0,n.jsx)(i.li,{children:"Ideally, verify user's relation to file (ownership), or containing directory before updating or deleting files"}),"\n",(0,n.jsx)(i.li,{children:"The application uses the \\Magento\\Framework\\App\\Filesystem\\DirectoryList::PUB directory for public files."}),"\n",(0,n.jsx)(i.li,{children:"Uploaded file paths must be validated using the ReadInterface and WriteInterface instances, similar to the preceding example."}),"\n",(0,n.jsx)(i.li,{children:"\\Magento\\Framework\\Filesystem\\Io\\File can help extract file extensions from filenames."}),"\n"]}),"\n",(0,n.jsx)(i.pre,{children:(0,n.jsx)(i.code,{children:"class MyFileUploader {\n    private const UPLOAD_DIR = 'my-module/customer-jpegs';\n\n    private \\Magento\\Framework\\Filesystem\\Io\\File $fileUtil;\n\n    private array $allowedExt = ['jpg', 'jpeg'];\n\n\x13    private \\Magento\\Framework\\Filesystem\\Directory\\WriteFactory $writeFactory;\n\n    private \\Magento\\Framework\\Filesystem $filesystem;\n\n    /**\n      * @param string $customerId UserContextInterface::getUserId() - current customer\n      * @param array $uploadedFileData uploaded file data from $_FILES\n      * @return MediaFile\n      * @throws \\Magento\\Framework\\Exception\\ValidatorException\n      */\n    public function upload(string $customerId, array $uploadedFileData): MediaFile\n    {\n        //Get upload file's metadata\n        $info = $this->fileUtil->getPathInfo($uploadedFileData['name']);\n        //Validate extension is allowed\n        if (!in_array($info['extension'], $this->allowedExt, true)) {\n            throw new ValidationException('Only JPEG files allowed');\n        }\n\n        //Initiate WriteInterface instance of the target directory\n        //Target dir is a sub-dir of PUB\n        $uploadDir = $this->writeFactory->create(\n            $this->filesystem->getDirectoryRead(\\Magento\\Framework\\App\\Filesystem\\DirectoryList::PUB)\n                ->getAbsolutePath(self::UPLOAD_DIR)\n        );\n        //Get target path if uploaded to the dir\n        $realPath  =$uploadDir->getDriver()->getRealPathSafety($uploadDir->getAbsolutePath($uploadedFileData['name']));\n\n        //Validate that the target file name is not a system file\n        $this->validateNotSystemFile($realPath);\n        //Validate that target folder (UPLOAD_DIR + ['name'] - ['basename']) is not a system folder\n        $this->validateNotSystemFolder(preg_replace('/\\/[^\\/]+$/', '', $realPath));\n        //Validate that given file doesn't exist or is own by current customer\n        $existingMediaFileInfo = $this->findFileByRelativePath($realPath);\n        if ($existingMediaFileInfo && $existingMediaFileInfo->getCustomerId() !== $customerId) {\n            throw new ValidationException('Access denied');\n        }\n\n        //Copy temp file to target path\n        $uploadDir->getDriver()->copy(\n            $uploadedFileData['tmp_name'],\n            $realPath\n        );\n\n        //Persist file info\n        $mediaFile = new MediaFile($customerId, $realPath);\n        return $this->persist($mediaFile);\n    }\n}\n"})}),"\n",(0,n.jsx)(i.h3,{id:"Components",children:"Components"}),"\n",(0,n.jsx)(i.p,{children:"Get path to components"}),"\n",(0,n.jsx)(i.pre,{children:(0,n.jsx)(i.code,{children:"    Magento\\Framework\\Component\\ComponentRegistrar\n    /**#@+\n     * Different types of components\n     */\n    const MODULE = 'module';\n    const LIBRARY = 'library';\n    const THEME = 'theme';\n    const LANGUAGE = 'language';\n    const SETUP = 'setup';\n    \n    Magento\\Framework\\Component\\ComponentRegistrar::getPath()\n    \n    Get path to module:\n    $this->componentRegistrar->getPath(ComponentRegistrar::MODULE, $moduleName)\n"})}),"\n",(0,n.jsx)(i.h2,{id:"Upload",children:"Upload"}),"\n",(0,n.jsx)(i.h2,{id:"Read-files",children:"Read files"}),"\n",(0,n.jsx)(i.h3,{id:"CSV",children:"CSV"}),"\n",(0,n.jsx)(i.p,{children:"Magento\\Framework\\File\\Csv"}),"\n",(0,n.jsx)(i.pre,{children:(0,n.jsx)(i.code,{children:"Get Data\nMagento\\Framework\\File\\Csv::getData()\n\nWrite Data\nMagento\\Framework\\File\\Csv::saveData()\n\nGet Data Pair\nMagento\\Framework\\File\\Csv::getDataPair()\n"})}),"\n",(0,n.jsx)(i.h3,{id:"Json",children:"Json"}),"\n",(0,n.jsx)(i.h3,{id:"Xml",children:"Xml"}),"\n",(0,n.jsx)(i.h3,{id:"Excel",children:"Excel"})]})}function h(e={}){const{wrapper:i}={...(0,a.R)(),...e.components};return i?(0,n.jsx)(i,{...e,children:(0,n.jsx)(c,{...e})}):c(e)}},8453:(e,i,t)=>{t.d(i,{R:()=>s,x:()=>l});var n=t(6540);const a={},r=n.createContext(a);function s(e){const i=n.useContext(r);return n.useMemo((function(){return"function"==typeof e?e(i):{...i,...e}}),[i,e])}function l(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:s(e.components),n.createElement(r.Provider,{value:i},e.children)}}}]);