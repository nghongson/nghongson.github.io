"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[2324],{47112:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>h,frontMatter:()=>i,metadata:()=>a,toc:()=>l});var s=t(74848),r=t(28453);const i={},o=void 0,a={id:"server/kubernetes/Kubernetes vs Docker",title:"Kubernetes vs Docker",description:"Core Docker concepts",source:"@site/docs/server/kubernetes/Kubernetes vs Docker.md",sourceDirName:"server/kubernetes",slug:"/server/kubernetes/Kubernetes vs Docker",permalink:"/docs/server/kubernetes/Kubernetes vs Docker",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"K8S",permalink:"/docs/category/k8s"},next:{title:"Setup docker",permalink:"/docs/server/kubernetes/basic"}},c={},l=[{value:"Docker images and Dockerfiles",id:"Docker-images-and-Dockerfiles",level:3},{value:"Dockerfiles",id:"Dockerfiles",level:3},{value:"Docker containers",id:"Docker-containers",level:3},{value:"Docker Compose",id:"Docker-Compose",level:3}];function d(e){const n={code:"code",em:"em",h1:"h1",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.p,{children:"Core Docker concepts\nDocker revolves around two core concepts: containers and images."}),"\n",(0,s.jsx)(n.p,{children:"A Docker container is an executable software package running in an isolated environment that includes its own operating system, filesystem, virtual network, and namespace, and that bundles an application and its dependencies."}),"\n",(0,s.jsx)(n.p,{children:"A Docker image, on the other hand, is the template from which containers are created. It includes the base operating system, initial filesystem, application code, tools, libraries, dependencies, and configurations required to be able to create a runnable instance within a container."}),"\n",(0,s.jsx)(n.h3,{id:"Docker-images-and-Dockerfiles",children:"Docker images and Dockerfiles"}),"\n",(0,s.jsx)(n.p,{children:"A Docker image is an immutable, stand-alone, and executable package that contains everything needed to run a piece of software, including the runtime, filesystem, system tools, application's code, libraries, and settings."}),"\n",(0,s.jsx)(n.p,{children:"An image is composed of a base image, which typically includes a minimal operating system, a runtime environment, and some essential tools required to run software applications, and additional layers that represent modifications and additions made to that base image."}),"\n",(0,s.jsx)(n.p,{children:"It serves as a template for creating Docker containers."}),"\n",(0,s.jsx)(n.p,{children:"Both base and custom images are usually stored on and downloaded from servers called Docker registries, like the official Docker Hub registry."}),"\n",(0,s.jsx)(n.h3,{id:"Dockerfiles",children:"Dockerfiles"}),"\n",(0,s.jsx)(n.p,{children:"A Dockerfile is a plain text file that contains all the necessary instructions to create a Docker image."}),"\n",(0,s.jsxs)(n.p,{children:["When you build the Docker image using the ",(0,s.jsx)(n.code,{children:"docker build"})," command,"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"FROM ubuntu:latest\n\nRUN apt update\nRUN apt install -y nginx\n\nCOPY test_html /var/www/html\n\nRUN ln -sf /dev/stdout /var/log/nginx/access.log\n\nEXPOSE 80\nCMD /usr/sbin/nginx -g 'daemon off;'\n"})}),"\n",(0,s.jsx)(n.h3,{id:"Docker-containers",children:"Docker containers"}),"\n",(0,s.jsx)(n.p,{children:"A Docker container is a runnable instance of a Docker image."}),"\n",(0,s.jsx)(n.h3,{id:"Docker-Compose",children:"Docker Compose"}),"\n",(0,s.jsx)(n.p,{children:"An overview of Docker Compose files\nDocker Compose files are written in the YAML format and are, by default, named compose.yaml."}),"\n",(0,s.jsx)(n.p,{children:"They usually contain a list of:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Services: the containers, their configurations, and their relationships."}),"\n",(0,s.jsx)(n.li,{children:"Networks: the virtual networks that facilitate the communication between the different services."}),"\n",(0,s.jsx)(n.li,{children:"Volumes: the persistent data storages used by the services."}),"\n",(0,s.jsx)(n.li,{children:"Configs: the services configuration stored separately from the containers filesystems."}),"\n",(0,s.jsx)(n.li,{children:"Secrets: the sensitive services data, such as passwords or tokens."}),"\n"]}),"\n",(0,s.jsx)(n.h1,{id:"Start-an-overview-of-Kubernetes",children:"Start an overview of Kubernetes"}),"\n",(0,s.jsx)(n.p,{children:"Core Kubernetes concepts\nKubernetes revolves around three core concepts: Pods, Nodes and clusters."}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.em,{children:(0,s.jsx)(n.strong,{children:"A Pod"})})," is the smallest deployable unit of computation within a Node, that runs one or more tightly coupled containers that are designed to share storage and network resources."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.em,{children:(0,s.jsx)(n.strong,{children:"A Node"})}),", also called Worker Node, is an individual server within a cluster that can run multiple Pods, providing the resources and runtime environment for containers."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.em,{children:(0,s.jsx)(n.strong,{children:"A cluster"})})," is a collection of Nodes that are managed by the control plane and that work together to run containerized applications by providing the entire computing infrastructure.\nThe Kubernetes control plane\nThe control plane is the central management component that administers the entire Kubernetes cluster.\nIt is composed of several components, including:"]}),"\n"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"The API server, which is responsible for processing RESTful API requests and serving as the gateway to the cluster's internal workings."}),"\n",(0,s.jsx)(n.li,{children:"etcd, which is a database used by Kubernetes to store and manage the cluster's configuration data."}),"\n",(0,s.jsx)(n.li,{children:"The scheduler, which is responsible for placing Pods onto suitable Nodes within the cluster."}),"\n",(0,s.jsx)(n.li,{children:"The controller manager, which regulates the state of the system to ensure it matches the desired configurations specified by users."}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Kubernetes Worker Nodes\nKubernetes Pods"}),"\n",(0,s.jsx)(n.p,{children:"Kubernetes Controllers"}),"\n",(0,s.jsx)(n.h1,{id:"Using-Docker-and-Kubernetes",children:"Using Docker and Kubernetes"}),"\n",(0,s.jsx)(n.h1,{id:"A-real-life-scenario-Automating-the-deployment-of-an-application-with-Docker-and-Kubernetes",children:"A real-life scenario: Automating the deployment of an application with Docker and Kubernetes"}),"\n",(0,s.jsx)(n.p,{children:"Step 1: Developing the application\nStep 2: Creating a Dockerfile\nStep 3: Building the Docker image\nStep 4: Testing the Docker image\nStep 5: Pushing the Docker image to a registry\nStep 6: Setting up a Kubernetes cluster\nStep 7: Creating a Kubernetes Deployment and Service configuration\nStep 8: Applying the Kubernetes configuration to the cluster\nStep 9: Automating the process with CI/CD"})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>a});var s=t(96540);const r={},i=s.createContext(r);function o(e){const n=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),s.createElement(i.Provider,{value:n},e.children)}}}]);