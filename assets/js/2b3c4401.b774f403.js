"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[7530],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>m});var i=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,i,a=function(e,t){if(null==e)return{};var n,i,a={},r=Object.keys(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=i.createContext({}),d=function(e){var t=i.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=d(e.components);return i.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},u=i.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),u=d(n),m=a,f=u["".concat(s,".").concat(m)]||u[m]||p[m]||r;return n?i.createElement(f,o(o({ref:t},c),{},{components:n})):i.createElement(f,o({ref:t},c))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,o=new Array(r);o[0]=u;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:a,o[1]=l;for(var d=2;d<r;d++)o[d]=n[d];return i.createElement.apply(null,o)}return i.createElement.apply(null,n)}u.displayName="MDXCreateElement"},8469:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>p,frontMatter:()=>r,metadata:()=>l,toc:()=>d});var i=n(7462),a=(n(7294),n(3905));const r={},o="Working with files in Magento",l={unversionedId:"mage2/files",id:"mage2/files",title:"Working with files in Magento",description:"Files inaccessible by users",source:"@site/docs/mage2/files.md",sourceDirName:"mage2",slug:"/mage2/files",permalink:"/docs/mage2/files",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Debug M2",permalink:"/docs/mage2/debugs"},next:{title:"graphql",permalink:"/docs/mage2/graphql"}},s={},d=[{value:"Files inaccessible by users",id:"files-inaccessible-by-users",level:3},{value:"Files that require authorization",id:"files-that-require-authorization",level:3},{value:"Publicly accessible media files",id:"publicly-accessible-media-files",level:3},{value:"Components",id:"components",level:3},{value:"Upload",id:"upload",level:2},{value:"Read files",id:"read-files",level:2},{value:"CSV",id:"csv",level:3},{value:"Json",id:"json",level:3},{value:"Xml",id:"xml",level:3},{value:"Excel",id:"excel",level:3}],c={toc:d};function p(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,i.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"working-with-files-in-magento"},"Working with files in Magento"),(0,a.kt)("h3",{id:"files-inaccessible-by-users"},"Files inaccessible by users"),(0,a.kt)("p",null,"Some files, generated or uploaded, need to be stored on the server for further processing or querying, but should not be directly accessible through a URL. Below are measures to avoid potential unauthorized access, path traversal, or RCE problems from such files"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Use random file names and extensions (it's better to use no file extensions); do not trust file names provided by users"),(0,a.kt)("li",{parentName:"ul"},"Store files in a directory specifically for generated/uploaded files"),(0,a.kt)("li",{parentName:"ul"},"Do not store these files in an HTTP accessible folder (like /pub)"),(0,a.kt)("li",{parentName:"ul"},"Store file records in a database if the files need to be assigned to an entity"),(0,a.kt)("li",{parentName:"ul"},"Do not trust user provided file names/IDs when deleting files; validate file ownership through the database")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"class MyClass {\n    private \\Magento\\Framework\\Filesystem $filesystem;\n\n    private \\Magento\\Framework\\Filesystem\\Directory\\WriteFactory $writeFactory;\n\n    private \\Magento\\Framework\\Math\\Random $rand;\n\n    public function __construct(\n        \\Magento\\Framework\\Filesystem $filesystem,\n        \\Magento\\Framework\\Filesystem\\Directory\\WriteFactory $writeFactory,\n        \\Magento\\Framework\\Math\\Random $rand\n    ) {\n        $this->filesystem = $filesystem;\n        $this->writeFactory = $writeFactory;\n        $this->rand = $rand;\n    }\n\n    ...\n\n    public function workWithFiles(): void {\n        ...\n\n        //To read \"MAGENTO_ROOT/var\" sub-directories or files.\n        $varDir = $this->filesystem->getDirectoryRead(\\Magento\\Framework\\App\\Filesystem\\DirectoryList::VAR_DIR);\n        //Going to write files into a designated folder specific to these type of files and functionality\n        //Getting WriteInterface instance of `MAGENTO_ROOT/var/my-modules-dir`\n        $thisModulesFilesDir = $this->writeFactory->create($varDir->getAbsolutePath('my-modules-dir'));\n\n        //Random file name\n        $randomFileName = $this->rand->getRandomString(32);\n        //Copying a file from the system temporary directory into it's new path\n        $thisModulesFilesDir->getDriver()\n            ->copy($tmpUploadedOrGeneratedFilePath, $thisModulesFilesDir->getAbsolutePath($randomFileName));\n    }\n}\n")),(0,a.kt)("h3",{id:"files-that-require-authorization"},"Files that require authorization"),(0,a.kt)("p",null,"You should treat files that require authorization to download the same way as inaccessible files; with a controller that performs authorization and then serves the file by outputting its content in response body"),(0,a.kt)("h3",{id:"publicly-accessible-media-files"},"Publicly accessible media files"),(0,a.kt)("p",null,"Publicly accessible media files present higher risk and require special care because you must keep the user-provided path and file extension. You should verify the following"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Media files can only be placed in a publicly accessible path"),(0,a.kt)("li",{parentName:"ul"},"Uploaded file path is inside the designated folder or its subdirectories"),(0,a.kt)("li",{parentName:"ul"},"Extension is safe (use an allow-list)"),(0,a.kt)("li",{parentName:"ul"},"File path is out of system folders that contain other application files"),(0,a.kt)("li",{parentName:"ul"},"Prevent deleting system files in public folders"),(0,a.kt)("li",{parentName:"ul"},"Ideally, verify user's relation to file (ownership), or containing directory before updating or deleting files"),(0,a.kt)("li",{parentName:"ul"},"The application uses the \\Magento\\Framework\\App\\Filesystem\\DirectoryList::PUB directory for public files."),(0,a.kt)("li",{parentName:"ul"},"Uploaded file paths must be validated using the ReadInterface and WriteInterface instances, similar to the preceding example."),(0,a.kt)("li",{parentName:"ul"},"\\Magento\\Framework\\Filesystem\\Io\\File can help extract file extensions from filenames.")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"class MyFileUploader {\n    private const UPLOAD_DIR = 'my-module/customer-jpegs';\n\n    private \\Magento\\Framework\\Filesystem\\Io\\File $fileUtil;\n\n    private array $allowedExt = ['jpg', 'jpeg'];\n\n\x13    private \\Magento\\Framework\\Filesystem\\Directory\\WriteFactory $writeFactory;\n\n    private \\Magento\\Framework\\Filesystem $filesystem;\n\n    /**\n      * @param string $customerId UserContextInterface::getUserId() - current customer\n      * @param array $uploadedFileData uploaded file data from $_FILES\n      * @return MediaFile\n      * @throws \\Magento\\Framework\\Exception\\ValidatorException\n      */\n    public function upload(string $customerId, array $uploadedFileData): MediaFile\n    {\n        //Get upload file's metadata\n        $info = $this->fileUtil->getPathInfo($uploadedFileData['name']);\n        //Validate extension is allowed\n        if (!in_array($info['extension'], $this->allowedExt, true)) {\n            throw new ValidationException('Only JPEG files allowed');\n        }\n\n        //Initiate WriteInterface instance of the target directory\n        //Target dir is a sub-dir of PUB\n        $uploadDir = $this->writeFactory->create(\n            $this->filesystem->getDirectoryRead(\\Magento\\Framework\\App\\Filesystem\\DirectoryList::PUB)\n                ->getAbsolutePath(self::UPLOAD_DIR)\n        );\n        //Get target path if uploaded to the dir\n        $realPath  =$uploadDir->getDriver()->getRealPathSafety($uploadDir->getAbsolutePath($uploadedFileData['name']));\n\n        //Validate that the target file name is not a system file\n        $this->validateNotSystemFile($realPath);\n        //Validate that target folder (UPLOAD_DIR + ['name'] - ['basename']) is not a system folder\n        $this->validateNotSystemFolder(preg_replace('/\\/[^\\/]+$/', '', $realPath));\n        //Validate that given file doesn't exist or is own by current customer\n        $existingMediaFileInfo = $this->findFileByRelativePath($realPath);\n        if ($existingMediaFileInfo && $existingMediaFileInfo->getCustomerId() !== $customerId) {\n            throw new ValidationException('Access denied');\n        }\n\n        //Copy temp file to target path\n        $uploadDir->getDriver()->copy(\n            $uploadedFileData['tmp_name'],\n            $realPath\n        );\n\n        //Persist file info\n        $mediaFile = new MediaFile($customerId, $realPath);\n        return $this->persist($mediaFile);\n    }\n}\n")),(0,a.kt)("h3",{id:"components"},"Components"),(0,a.kt)("p",null,"Get path to components"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"    Magento\\Framework\\Component\\ComponentRegistrar\n    /**#@+\n     * Different types of components\n     */\n    const MODULE = 'module';\n    const LIBRARY = 'library';\n    const THEME = 'theme';\n    const LANGUAGE = 'language';\n    const SETUP = 'setup';\n    \n    Magento\\Framework\\Component\\ComponentRegistrar::getPath()\n    \n    Get path to module:\n    $this->componentRegistrar->getPath(ComponentRegistrar::MODULE, $moduleName)\n")),(0,a.kt)("h2",{id:"upload"},"Upload"),(0,a.kt)("h2",{id:"read-files"},"Read files"),(0,a.kt)("h3",{id:"csv"},"CSV"),(0,a.kt)("p",null,"Magento\\Framework\\File\\Csv"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"Get Data\nMagento\\Framework\\File\\Csv::getData()\n\nWrite Data\nMagento\\Framework\\File\\Csv::saveData()\n\nGet Data Pair\nMagento\\Framework\\File\\Csv::getDataPair()\n")),(0,a.kt)("h3",{id:"json"},"Json"),(0,a.kt)("h3",{id:"xml"},"Xml"),(0,a.kt)("h3",{id:"excel"},"Excel"))}p.isMDXComponent=!0}}]);