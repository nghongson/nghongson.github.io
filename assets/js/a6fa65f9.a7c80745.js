"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[7713],{3054:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>u,frontMatter:()=>s,metadata:()=>a,toc:()=>l});var i=n(4848),r=n(8453);const s={},o="K.I.S.S Principle",a={id:"architect/KISS Principle",title:"K.I.S.S Principle",description:"KISS - Keep it simple stupid:",source:"@site/docs/architect/KISS Principle.md",sourceDirName:"architect",slug:"/architect/KISS Principle",permalink:"/docs/architect/KISS Principle",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"HTTP messages",permalink:"/docs/architect/HTTP messages"},next:{title:"SOLID",permalink:"/docs/architect/SOLID"}},c={},l=[{value:"KISS - Keep it simple stupid:",id:"KISS---Keep-it-simple-stupid",level:2},{value:"YAGNI - \u201cYou Aren\u2019t Gonna Need It\u201d:",id:"YAGNI---You-Arent-Gonna-Need-It",level:2},{value:"DRY - \u201cDon\u2019t Repeat Yourself\u201d:",id:"DRY---Dont-Repeat-Yourself",level:2}];function p(e){const t={br:"br",h1:"h1",h2:"h2",p:"p",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.h1,{id:"KISS-Principle",children:"K.I.S.S Principle"}),"\n",(0,i.jsx)(t.h2,{id:"KISS---Keep-it-simple-stupid",children:"KISS - Keep it simple stupid:"}),"\n",(0,i.jsx)(t.p,{children:"Most systems work best if they are kept simple rather than making them complex"}),"\n",(0,i.jsx)(t.h2,{id:"YAGNI---You-Arent-Gonna-Need-It",children:"YAGNI - \u201cYou Aren\u2019t Gonna Need It\u201d:"}),"\n",(0,i.jsxs)(t.p,{children:["Coding some extra features \u201cjust in case we need them\u201d or thinking\u201cwe will eventually need them\u201d.",(0,i.jsx)(t.br,{}),"\n","\u201cDo the Simplest Thing That Could Possibly Work\u201d"]}),"\n",(0,i.jsx)(t.h2,{id:"DRY---Dont-Repeat-Yourself",children:"DRY - \u201cDon\u2019t Repeat Yourself\u201d:"}),"\n",(0,i.jsx)(t.p,{children:'The DRY principle, formulated by Andrew Hunt and David Thomas in their book The Pragmatic Programmer, states that \u201cevery piece of knowledge must have a single, unambiguous, authoritative representation within a system."  In other words, you must try to maintain the behavior of a functionality of the system in a single piece of code.'})]})}function u(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(p,{...e})}):p(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>o,x:()=>a});var i=n(6540);const r={},s=i.createContext(r);function o(e){const t=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),i.createElement(s.Provider,{value:t},e.children)}}}]);