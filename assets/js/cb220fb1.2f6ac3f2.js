"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[9968],{3905:(e,n,t)=>{t.d(n,{Zo:()=>s,kt:()=>g});var i=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,i)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,i,r=function(e,n){if(null==e)return{};var t,i,r={},a=Object.keys(e);for(i=0;i<a.length;i++)t=a[i],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(i=0;i<a.length;i++)t=a[i],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var c=i.createContext({}),p=function(e){var n=i.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},s=function(e){var n=p(e.components);return i.createElement(c.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return i.createElement(i.Fragment,{},n)}},d=i.forwardRef((function(e,n){var t=e.components,r=e.mdxType,a=e.originalType,c=e.parentName,s=o(e,["components","mdxType","originalType","parentName"]),d=p(t),g=r,f=d["".concat(c,".").concat(g)]||d[g]||u[g]||a;return t?i.createElement(f,l(l({ref:n},s),{},{components:t})):i.createElement(f,l({ref:n},s))}));function g(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var a=t.length,l=new Array(a);l[0]=d;var o={};for(var c in n)hasOwnProperty.call(n,c)&&(o[c]=n[c]);o.originalType=e,o.mdxType="string"==typeof e?e:r,l[1]=o;for(var p=2;p<a;p++)l[p]=t[p];return i.createElement.apply(null,l)}return i.createElement.apply(null,t)}d.displayName="MDXCreateElement"},3948:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>l,default:()=>u,frontMatter:()=>a,metadata:()=>o,toc:()=>p});var i=t(7462),r=(t(7294),t(3905));const a={},l=void 0,o={unversionedId:"architect/design-patterns/SOLID",id:"architect/design-patterns/SOLID",title:"SOLID",description:"- Single Responsibility Principle",source:"@site/docs/architect/design-patterns/SOLID.md",sourceDirName:"architect/design-patterns",slug:"/architect/design-patterns/SOLID",permalink:"/docs/architect/design-patterns/SOLID",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Design patterns",permalink:"/docs/architect/design-patterns/"},next:{title:"abstract-factory",permalink:"/docs/architect/design-patterns/abstract-factory"}},c={},p=[{value:"1, Single Responsibility Principle",id:"1-single-responsibility-principle",level:2},{value:"Coupling &amp; Cohesion",id:"coupling--cohesion",level:3},{value:"Package names",id:"package-names",level:3},{value:"Bad package names",id:"bad-package-names",level:3},{value:"Go\u2019s UNIX philosophy",id:"gos-unix-philosophy",level:3},{value:"2, Open / Closed Principle",id:"2-open--closed-principle",level:2},{value:"3, Liskov Substitution Principle",id:"3-liskov-substitution-principle",level:2},{value:"4, Interface Segregation Principle",id:"4-interface-segregation-principle",level:2},{value:"Interfaces",id:"interfaces",level:3},{value:"5, Dependency Inversion Principle",id:"5-dependency-inversion-principle",level:2}],s={toc:p};function u(e){let{components:n,...t}=e;return(0,r.kt)("wrapper",(0,i.Z)({},s,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Single Responsibility Principle"),(0,r.kt)("li",{parentName:"ul"},"Open / Closed Principle"),(0,r.kt)("li",{parentName:"ul"},"Liskov Substitution Principle"),(0,r.kt)("li",{parentName:"ul"},"Interface Segregation Principle"),(0,r.kt)("li",{parentName:"ul"},"Dependency Inversion Principle")),(0,r.kt)("h2",{id:"1-single-responsibility-principle"},"1, Single Responsibility Principle"),(0,r.kt)("h3",{id:"coupling--cohesion"},"Coupling & Cohesion"),(0,r.kt)("h3",{id:"package-names"},"Package names"),(0,r.kt)("h3",{id:"bad-package-names"},"Bad package names"),(0,r.kt)("h3",{id:"gos-unix-philosophy"},"Go\u2019s UNIX philosophy"),(0,r.kt)("h2",{id:"2-open--closed-principle"},"2, Open / Closed Principle"),(0,r.kt)("h2",{id:"3-liskov-substitution-principle"},"3, Liskov Substitution Principle"),(0,r.kt)("h2",{id:"4-interface-segregation-principle"},"4, Interface Segregation Principle"),(0,r.kt)("h3",{id:"interfaces"},"Interfaces"),(0,r.kt)("h2",{id:"5-dependency-inversion-principle"},"5, Dependency Inversion Principle"))}u.isMDXComponent=!0}}]);